{"version":3,"sources":["util/refreshToken.js","components/auth/Login.js","components/auth/Logout.js","home/Home.js","index.js","profile/Profile.js","util/auth.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","console","log","localStorage","setItem","id_token","setTimeout","require","LoginHooks","props","signIn","useGoogleLogin","onSuccess","profileObj","JSON","stringify","reload","window","location","onFailure","clientId","isSignedIn","accessType","onClick","className","LogoutHooks","signOut","useGoogleLogout","onLogoutSuccess","err","App","useState","user","setUser","useEffect","tempUser","getItem","parse","href","target","rel","to","routes","path","component","checkLogin","givenName","routing","map","route","ind","key","exact","Home","ReactDOM","render","document","getElementById","module","exports"],"mappings":"2QAAaA,EAAoB,SAACC,GAE9B,IAAIC,EAA6D,KAA5CD,EAAIE,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAC,EAAA,sEACML,EAAIM,qBADV,OACbC,EADa,OAEnBN,EAA2D,KAA1CM,EAAWJ,YAAc,MAC1CK,QAAQC,IAAI,cAAeF,GAE3BG,aAAaC,QAAQ,YAAaJ,EAAWK,UAG7CC,WAAWT,EAAcH,GARN,2CAAH,qDAYlBY,WAAWT,EAAcH,K,iICbtBF,EAAqBe,EAAQ,IAA7Bf,kBAEQ,SAASgB,EAAWC,GAEjC,IAaQC,EAAWC,yBAAe,CAChCC,UAdgB,SAACnB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIoB,YAC/CV,aAAaC,QAAQ,OAAQU,KAAKC,UAAUtB,EAAIoB,aAChDrB,EAAkBC,IAEG,IAAjBgB,EAAMO,QAAiBC,OAAOC,SAASF,QAAO,IAUlDG,UAPgB,SAAC1B,GACjBU,aAAaC,QAAQ,OAAQ,KAO7BgB,SAAWA,WACXC,YAAY,EACZC,WAAY,YALNZ,OAQR,OACE,4BAAQa,QAASb,EAAQc,UAAU,UAAnC,uBCzBW,SAASC,EAAYhB,GAClC,IAYQiB,EAAYC,0BAAgB,CAClCP,oBACAQ,gBAdsB,SAACnC,GACvBQ,QAAQC,IAAI,sBACZC,aAAaC,QAAQ,OAAQ,KAER,IAAjBK,EAAMO,QAAiBC,OAAOC,SAASF,QAAO,IAWlDG,UARgB,SAACU,GACjB5B,QAAQC,IAAI2B,MAINH,QAMR,OACE,4BAAQH,QAASG,GAAjB,YCaWI,MA/Bf,WAAe,MAGWC,mBAAS,IAHpB,mBAGNC,EAHM,KAGAC,EAHA,KAUb,OALAC,qBAAU,WACR,IAAIC,EAAWhC,aAAaiC,QAAQ,QAAUtB,KAAKuB,MAAMlC,aAAaiC,QAAQ,SAAW,GACzFH,EAAQE,KACR,IAGA,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,mCACO,sCADP,wBAGA,uBACEA,UAAU,WACVc,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQCR,EAAM,kBAAC,EAAD,CAAQhB,QAAQ,IAAU,kBAAC,EAAD,CAAOA,QAAQ,IAC/CgB,EAAM,kBAAC,IAAD,CAAMS,GAAG,YAAT,WAAmC,MCtBlD,IAAIC,EAAS,CACX,CACEC,KAAO,WACPC,UCTW,SAAiBnC,GAAO,MAGXsB,mBAAS,MAHE,mBAG5BC,EAH4B,KAGtBC,EAHsB,KAYnC,OARAC,qBAAU,WACN,IAAIF,EAAO7B,aAAaiC,QAAQ,QAAUtB,KAAKuB,MAAMlC,aAAaiC,QAAQ,SAAW,GACrFH,EAAQD,GACRa,qBAAWb,GACX/B,QAAQC,IAAI8B,KACd,IAIF,qCAAWA,EAAKA,EAAKc,UAAU,GAA/B,QDAEC,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEIL,EAAOM,KAAI,SAACC,EAAMC,GAChB,OAAO,kBAAC,IAAD,CAAOC,IAAKD,EAAKE,OAAK,EAACT,KAAMM,EAAMN,KAAMC,UAAWK,EAAML,eAGrE,kBAAC,IAAD,CAAOQ,OAAK,EAACR,UAAWS,MAK9BC,IAASC,OACPR,EACAS,SAASC,eAAe,U,gBExB1BC,EAAOC,QAAU,CAACd,WALlB,SAAqBb,GACjB,GAAIA,EAAM,OAAO,EACZf,OAAOC,SAASoB,KAAO,KAGHlB,SAPd,8E","file":"static/js/main.d134d33a.chunk.js","sourcesContent":["export const refreshTokenSetup = (res) => {\n    // Timing to renew access token\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n  \n    const refreshToken = async () => {\n      const newAuthRes = await res.reloadAuthResponse();\n      refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n      console.log('newAuthRes:', newAuthRes);\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\n      localStorage.setItem('authToken', newAuthRes.id_token);\n  \n      // Setup the other timer after the first one\n      setTimeout(refreshToken, refreshTiming);\n    };\n  \n    // Setup first refresh timer\n    setTimeout(refreshToken, refreshTiming);\n  };","import React from 'react';\nimport { useGoogleLogin } from 'react-google-login';\nimport { checkLogin,clientId } from '../../util/auth'\nconst {refreshTokenSetup} = require('../../util/refreshToken')\n\nexport default function LoginHooks(props) {\n\n  const onSuccess = (res) => {\n    console.log('Login Success: currentUser:', res.profileObj);\n    localStorage.setItem('user', JSON.stringify(res.profileObj));\n    refreshTokenSetup(res);\n    //checkLogin(res)\n    if (props.reload === true) window.location.reload(false)\n  };\n\n  const onFailure = (res) => {\n    localStorage.setItem('user', '');\n    //checkLogin()\n  };\n\n  const { signIn } = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId : clientId,\n    isSignedIn: true,\n    accessType: 'offline',\n  });\n\n  return (\n    <button onClick={signIn} className=\"button\">\n      Sign in with Google\n    </button>\n  );\n}","import React from 'react';\nimport { useGoogleLogout}  from 'react-google-login';\nimport { checkLogin,clientId } from '../../util/auth'\n\nexport default function LogoutHooks(props) {\n  const onLogoutSuccess = (res) => {\n    console.log('Logged out Success');\n    localStorage.setItem('user', '');\n    //checkLogin()\n    if (props.reload === true) window.location.reload(false)\n  };\n\n  const onFailure = (err) => {\n    console.log(err);\n    //checkLogin()\n  };\n\n  const { signOut } = useGoogleLogout({\n    clientId,\n    onLogoutSuccess,\n    onFailure,\n  });\n\n  return (\n    <button onClick={signOut}>\n      Sign out\n    </button>\n  );\n}","import React, {useEffect,useState} from 'react';\nimport './Home.css';\nimport { Link } from 'react-router-dom'\nimport Login from '../components/auth/Login'\nimport Logout from '../components/auth/Logout'\n\nfunction App() {\n\n  //Making sure that user is login\n  const [user, setUser] = useState('');\n\n  useEffect(() => {\n    let tempUser = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : ''\n    setUser(tempUser)\n  },[])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        {user? <Logout reload={true}/> : <Login reload={true}/>}\n        {user? <Link to='/profile'>Profile</Link>:''}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Global CSS\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\n\nimport Home from './home/Home';\nimport Profile from './profile/Profile';\n\n// Add new routing path to new pages in here\nlet routes = [\n  {\n    path : \"/profile\",\n    component: Profile\n  }\n]\n\nconst routing = (\n  <Router>\n    <Switch>\n      {\n        routes.map((route,ind)=>{\n          return <Route key={ind} exact path={route.path} component={route.component}/>\n        })\n      }\n      <Route exact component={Home}/>\n    </Switch>\n  </Router>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n","import React, { useState, useEffect } from 'react';\nimport { checkLogin }  from '../util/auth'\n\nexport default function Profile(props) {\n\n    //Making sure that user is login\n    const [user, setUser] = useState(null);\n    useEffect(()=>{\n        let user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : ''\n        setUser(user)\n        checkLogin(user) //redirect user to homepage if not login\n        console.log(user)\n    },[])\n\n\n    return (\n    <div> Hi: {user?user.givenName:''} </div>\n    );\n}\n","let clientId = \"629278947250-nkpd44atk3oke72rnn4sv87hd8f5uckr.apps.googleusercontent.com\"\n\nfunction checkLogin (user) {\n    if (user) return true\n    else window.location.href = '/'\n}\n\nmodule.exports = {checkLogin,clientId} "],"sourceRoot":""}