# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  cmpe133 fall 2020 project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'
    Runtime: nodejs10.x
    MemorySize: 128
    Timeout: 60
    CodeUri: ./

Parameters:
  AppId:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  # These Lambda functions config associated with the source code: src/users
  putUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/user/put-user.putUserHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfileTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref ProfileTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user
            Method: POST                
  getUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/user/get-user.getUserHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfileTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref ProfileTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getUser
            Method: POST
  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/user/delete-user.deleteUserHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfileTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref ProfileTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /deleteUser
            Method: POST

  # These Lambda functions config associated with the source code: src/course
  getCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/course/get-course.getCourseHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref CourseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getCourse
            Method: POST                
  putCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/course/put-course.putCourseHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref CourseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /putCourse
            Method: POST
  deleteCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/course/delete-course.deleteCourseHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref CourseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /deleteCourse
            Method: POST

  # These Lambda functions config associated with the source code: src/assignments
  deleteAssignment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/delete-assignment.deleteAssignmentHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /deleteAssignment
            Method: POST
  deleteQuestion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/delete-question.deleteQuestionHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /deleteQuestion
            Method: POST
  putAssignment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/put-assignment.putAssignmentHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /putAssignment
            Method: POST
  getAssignment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/get-assignment.getAssignmentHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getAssignment
            Method: POST
  putGrade:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/put-grade.putGradeHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /putGrade
            Method: POST
  putQuestion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/put-question.putQuestionHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /putQuestion
            Method: POST
  putSubmission:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/assignments/put-submission.putSubmissionHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref AssignmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /putSubmission
            Method: POST

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ProfileTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - 
          AttributeName: "StudentID"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "StudentID"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"
      TableName: "ProfileTable"

  CourseTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - 
          AttributeName: "CourseID"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "CourseID"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"
      TableName: "CourseTable"
  
  AssignmentTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - 
          AttributeName: "AssignmentID"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "AssignmentID"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"
      TableName: "AssignmentTable"    